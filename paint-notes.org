* brainstorming: collapsing/summarizing  similar/redundant matrix columns
** if term A implies term B, leave out term B?
*** does paint already do this?
** if term A implies term B with high probability, somehow de-emphasize term B?
** collapse/de-emphasize columns that are all filled?
*** don't need to "paint" in a column if every row in it is already "painted"?
** somehow collapse/expand sets of GO terms according to GO structure?
* data source
** GOlr  http://wiki.geneontology.org/index.php/GOlr
* existing BBOp work
** phylo raphael demo http://amigo2.berkeleybop.org/cgi-bin/amigo2/pgraph
** bbop-js  https://github.com/kltm/bbop-js
* possible implementation techniques
** DIVs
*** CONs:
**** only rectangles (optionally rounded corners but not diagonal lines)
*** PROs:
**** all browsers
**** row position locked between tree and matrix
depends on implementation
*** fast?
** SVG
*** CONs:
**** not in IE <= 8
in particular, users on windows XP are stuck with IE <= 8
*** slow? (profile, test on different platforms)
** Raphael
*** SVG, plus VML (microsoft-only SVG predecessor) for IE <= 8
*** slow
each text method call triggers reflow
** 2-D canvas
*** CONs:
**** have to implement own hit-testing and other UI behaviors
(for determining the node being clicked or moused over, etc.)
*** how fast?
** webgl
*** CONs:
**** have to implement own hit-testing and other UI behaviors
**** only in chrome, firefox, safari (disabled by default in safari)
significantly, not supported by iOS or android browser, although
it is supported by firefox on android
*** fastest
** flash
*** blegh
*** deprecated
*** not supported in iOS, some android devices
* existing phylo JS widgets
** PhyloBox  http://phylobox.appspot.com/
*** canvas
** jsPhyloSVG  http://www.jsphylosvg.com/
*** SVG
** Jstree  http://lh3lh3.users.sourceforge.net/jstree.shtml
*** canvas
** EvolView  http://www.evolgenius.info/evolview.html
*** SVG
* existing generic tree JS widgets
** Sencha JS InvoVis Toolkit
*** generic (plug in other phylo code?)
*** uses canvas
* existing phylo non-JS widgets ("online" non-JS implementations)
** PhyloWidget  http://www.phylowidget.org/
*** Java
*** processing
** T-REX  http://www.trex.uqam.ca/
*** static images, server-generated SVG
** Archaeopteryx  http://www.phylosoft.org/archaeopteryx/
*** Java
** Hypergeny  http://bioinformatics.psb.ugent.be/hypergeny/home.php
*** Java
** iTOL  http://itol.embl.de/
*** flash
** TreeVector  http://supfam.cs.bris.ac.uk/TreeVector/
*** server-generated SVG
* non-web phylo tools
** ETE  http://ete.cgenomics.org/
* existing phylo functionality
This is phylo tree functionality I've seen in other tools, with notes about
where I saw it.  I've included strawman priorities that reflect my
my understanding; #A, here, means "stuff that we want to be in the first
iteration", #C means "maybe someday later".  No priority means I don't know
what it should be.

** data visualization
*** [#A] visually distinguish speciation vs. gene duplication
PAINT
*** [#A] style tree leaves
PAINT, many others
*** style subtrees
ETE
*** highlight tree paths
AMIGO2
*** show heatmap (matrix) for each tree node/leaf
PAINT, ETE
** input data
*** [#A] GOlr
*** [#C] newick/NH
*** [#C] nexus
*** [#C] phyloxml
** UI tree manipulation
*** [#A] ladderize
biopython Bio.Phylo.BaseTree.TreeMixin.ladderize,
org.paint.gui.genetree.ladder
*** [#A] collapse subtree
PAINT
*** [#A] prune subtree
PAINT
*** [#A] reroot at node
PAINT, Jstree
*** drag subtree
AMIGO2
*** rotate at node
phylobox
** programmer-oriented tree ops
*** iterate
*** get common ancestor
*** search
* found so far
** graffle.js window.onload
old test code?  it's causing a (non-fatal) error because there's
no container element named "holder" on the page
** firefox profiling (linux):
*** slowness from getBBox that's called from paper.text()
call stack: text->theText->setFillAndStroke->tuneText->getBBox
text added at phylo.js lines 194 and 950
**** paper.text also called from graph_connection
*** getBBox also called from get_path_between_info in phylo.js
*** commenting out text-related stuff makes initial drawing much faster
**** total time (from profiling page load) with text:
10255 ms
10429 ms
10567 ms
**** total time without text:
2711 ms
2319 ms
2308 ms
**** total time with text and non-loop text getBBox, r1.5.2
11245 ms
11285 ms
11367 ms
**** total time with text and loop text getBBox, r1.5.2
11550 ms
11630 ms
11889 ms
**** total time with text and proper non-loop text getBBox, r1.5.2
18986 ms
11358 ms
11486 ms
**** total time with non-try/catch getBBox, r1.5.2
11624 ms
11628 ms
** safari profiling (windows)
*** logging taking huge amounts of time
*** can't turn logging off globally?
apparently have to edit each JS file where there's a logger?
*** profile (self time) with DEBUG in various loggers turned off:
getBBox: 43%
getPropertyValue: 11%
** chrome profiling (linux) with loggers off
getBBox: 57%
setFillAndStroke: 11%
$: 6%
tuneText: 5%
** chrome profiling (windows) with loggers off
getBBox: 56%
setFillAndStroke: 10%
$: 6.73%
tuneText: 5.05%
*** chrome "timeline" tool, "frames" section, shows reflows
**** style invalidation and style recalculation interleaved
each element gets its style set and then getBBox is called
**** layout recalculation gets longer as more elements are added
layout times go from ~.2 ms to ~.7 ms
there's a few layouts per phylo node
** IE9 profiling
total time: 5367 ms
getBBox: 3536 ms
appendChild: 211 ms
setAttribute: 207 ms
** chrome timeline "frames" view shows browser relayout events

2/3 happening from
* example GOlr use in JS
** GOlr REPL
http://amigo2.berkeleybop.org/cgi-bin/amigo2/repl
** amigo search
http://amigo2.berkeleybop.org/cgi-bin/amigo2/amigo?mode=search
** bbop example golr sessions
[[http://wiki.geneontology.org/index.php/Example_GOlr_Sessions#Startup_code_for_REPL_environment.]]

// [Session start.]
go;
// [object Object]
bbop.core.what_is(go);
// "bbop.golr.manager.jquery"
go.set_id("UniProtKB:Q9UBY0");
// "id:UniProtKB:Q9UBY0"
go.fetch();
//
data;
// null
go.search();
// "http://golr.berkeleybop.org/select?defType=edismax&qt=standard&indent=on&wt=json&rows=10&start=0&fl=*%2Cscore&facet=true&facet.mincount=1&facet.sort=count&json.nl=arrarr&facet.limit=25&q=id:UniProtKB:Q9UBY0&packet=1&callback_type=search"
// Returned value placed in [data].
data;
// [object Object]
dump(data);
// [object Object]
dump(data.raw());
* architecture
** phylo tree widget
*** gets layout from tree model
** examples: subclasses of graph (in "bracket" and "tree")
** separate layout class, or get layout from tree model?
* strawman API
** gene tree widget
*** Constructor
phylo_tree(tree, layout)

The alternative here would be to pass in nodes and edges individually,
as the existing raphael AMIGO2 phylo tree does.  But IIRC Seth
wanted to move away from that.
*** Events:
**** movement events:
These would fire when the user does something that results in nodes
in the tree widget moving, e.g., dragging a node or a subtree,
rotating an internal node, etc.  A matrix widget could add handlers for
these events to animate row movement to keep rows aligned with the
tree.
In the matrix, moving those HTML elements may involves housekeeping
that has to be done at the beginning and/or end of a move, so I've
included start, end, and movement events here.  
***** node_move_start(node_id_list, start_position_list)
***** node_move(node_id_list, cur_position_list)
***** node_move_end(node_id_list, end_position_list)
**** click events:
***** node_click(node_id)
***** connection_click(parent_node_id, child_node_id)
not sure if we need this one
**** mouseenter/leave events:
or should these be hover events?  or should we have both?
***** node_mouseenter(node_id)
default behavior: highlight the path from the root to this node?
***** node_mouseleave(node_id)
***** connection_mouseenter(parent_node_id, child_node_id)
default behavior: show branch length?
***** connection_mouseleave(parent_node_id, child_node_id)
**** tree change events:
see also tree manipulation methods, below
***** alternative 1: fine-grained
****** subtree_hidden(node_id)
****** subtree_pruned(node_id)
****** rerooted(node_id)
***** alternative 2: coarse-grained
****** tree_changed(new_tree, new_layout)
*** Methods:
**** layout
***** set_layout(layout)
used to pass a new layout
e.g., if the user wants to switch from ascending to descending
ladderization
**** styling
"styling" here refers to setting CSS styles (e.g., text color,
background color/image, border color/thickness, etc.).
Return values would be the previous style (for situations where
you want to style things temporarily, e.g. for highlighting a node
bon mouseover, you would hang on to the return value from this method
and then call the styling method again with that value later to
restore the original style)
***** style_nodes(node_id_list, style)
e.g., one style_nodes call for all of the speciation internal nodes,
to set them to show circles, and a second style_nodes call for
all of the gene duplication internal nodes, to set them to show
squares
***** style_subtree(node_id, node_style, connection_style)
***** style_path(ancestor_node_id, descendent_node_id, node_style, connection_style)
error: descendent_node is not a descendant of ancestor_node
**** tree manipulation
***** alternative 1: fine-grained
widget would have to understand how to get a new layout, or
have built-in some knowledge about how layout changes when nodes
go away
****** hide_subtree(node_id)
****** prune_subtree(node_id)
****** reroot(node_id)
show only subtree rooted at node
***** alternative 2: coarse-grained
just provide a whole new tree
In this case, knowledge about hiding/pruning subtrees and re-rooting
the tree would be pushed out into the code that embeds the widget.
****** set_tree(tree, layout)
*** Properties:
**** styles
these would have default values that could be overridden
***** node_style
for internal nodes
***** leaf_style
***** connection_style
***** node_highlight
by default, nodes, leaves, and connections would get the
highlight style added when they get moused over
***** leaf_highlight
***** connection_highlight
